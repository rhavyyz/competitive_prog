#include <bits/stdc++.h>

using namespace std;

#define int long long
#define map unordered_map
#define all(A) A.begin(), A.end()

#define bug(x) cout << #x << ' ' << x << endl


int memo[2][40];
int gates[2][40];
char types[2][40];
int n;

int dp(int i, int side)
{
    if(i == n)
        return 1;
 
    if(memo[side][i] != 0)
        return memo[side][i];

    if(types[side][i] == '+')
        return memo[side][i] = dp(i+1, side); 


    // dpl[i]=dpl[i+1]+(a-1)max(dpl[i+1],dpr[i+1])

    return memo[side][i] = dp(i+1, side) + 
                           (gates[side][i] -1) * max(dp(i+1, side), dp(i+1, ((side + 1)%2))    );
}

int operate(int & sum, int i, int side)
{
    if(types[side][i] == '+')
        sum += gates[side][i];
    else
        sum *= gates[side][i];
    return sum;
}

int solve()
{

    int n, x; cin >> n >> x;

    if(x == 0)
    {
        while(n--)
            cout << 0 << ' ';
        cout << endl;

        return 0;
    }

    int base = 0, cp = x, next_b = 1;

    int  bits_qtd = 0;

    while(cp != 0)
    {
        if(cp%2)
        {
            base+=next_b;
            next_b = next_b<<1;
            bits_qtd+=1;
            cp/=2;
            continue;
        }

        break;
    }

    int nums_to_gen = (1 << (bits_qtd-1)) + 1;

    bug(base);
    bug(nums_to_gen);
    bug(bits_qtd);

    if(nums_to_gen <= n && base == x)
    {

    }

    for(int i = 0; i < nums_to_gen && i < n && i < (1 << bits_qtc); i++)
        cout << i << ' ';


    n -= nums_to_gen;

    while(n-- > 0)
        cout << x << ' ';
    

    cout << endl;


    return 1;
}

signed main()
{

    int t = 1;
    cin >> t;
    while(t--)
        solve();

    // cout << gate(2, '*').operate(1) << endl;
}

